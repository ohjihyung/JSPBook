<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1">
	
	<!-- 
		JSP 시큐리티 web.xml 설정
		
		1. 시큐리티 역할 설정하는 방법
		<security-role>
 			<role-name>role1</role-name>  // 역할 이름
 		</security-role>
		
		
		2. 시큐리티 제약 사항 설정
		<security-constraint>
 		<web-resource-collection>  // 웹 자원에 대한 접근 설정
		</web-resource-collection>
		<auth-constraint> // 웹 자원에 접근할 수 있는 인증된 사용자 설정
		</auth-constraint>
		
		<user-data-constraint> </user-data-constraint> // 데이터 전송시 데이터 보호 설정 
 	</security-constraint>
 	
 	
 		2-1 웹 자원에 대한 접근 설정 
 			<web-resource-collection>
 			<web-resource-name>JSPBOOK</web-resource-name> //웹 자원의 이름을 설정하여 생략할 수 있다
	 		<url-pattern>/ch10/security01.jsp</url-pattern> // 접근 제한을 요청할 때 URL 목록을 설정
	 		<http-method>GET</http-method> // http 메서드를설정(get,post)
		</web-resource-collection>
	
	
	
		2-2 웹 자원에 접근할 수 있는 인증된 사용자 설정
			- auth-constraint를 설정하지 않으면 웹 서버는 사용자 인증을 
			요규하지 않고 사용자의 요청을 승인한다
			
			<auth-constraint>
				<description></description>
				<role-name>role1</role-name> // 반드시 tomcat-users.xml에 등록된 역할과 사용자여야 한다
			</auth-constraint>
		
		
		2-3 클라이언트와 서버간에 데이터를 전송할 때 데이터를 보호하는 방법을 설정
		     -NONE : 기본값으로 데이터를 보호하지 않을때
		     -INTEGRAL : 전송중 데이터가 변경되지 않았음을 보장(무결성)
		     -CONFIDENTIAL : 전송 중 데이터를 아무도 훔처보지 않았음을 보장(기밀성)
		     	<user-data-constraint> 
		     		<transport-guarentee>NONE</>
		     	</user-data-constraint>
		     	
		     	
		3. 시큐리티 인증 설정하기
		<login-config>
 		<auth-method>BASIC</auth-method> // 웹 자원에 대한 인증 처리방식 설정
 		<realm-name></realm-name> //웹 자원에 접근할 수 있는 인증된 사용자 설정
 		<form-login-config></form-login-config> // 데이터 전송 시 데이터 보호를 설정
 		</login-config>
		
		
		3.1 웹 어플리케이션의 인증 처리 기법을 설정하는 요소
		
		BASIC: 웹 자원을 보호하는 간단한 일반적 방법
		DIGEST: 암호화 메커니즘을 이용해 전송 , 많이 사용 X
		FORM: 일반적 폼페이지 이용해 로그인 정보를 서버에 전송 
		       암호화 되지않은 로그인 정보를 그대로 전송 
		CLIENT-CERT : 클라이언트가 인증서를 가지고 공인 키 인증 방식을 사용해 로그인하는 방식
		               클라이언트가 인증서를 가지고 있어야함 로그인 되므로 비즈니스 환경에서만 사용 
	
		
		
		3.2  기본 인증의 영역 이름을 설정
			FORM 기반 인증이나 다른 인증 방법에 필요하지 않기 때문에 아무런 영향을 미치지 않지만, 데이터 문서화하는데
			일반적으로 사용 
			<realm-name>영역 이름</realm-name>
	
		3.3 인증 처리를 위한 로그인 및 오류페이지 설정
		  - auth-method  요소가 FORM 기반 인증 처리 기법으로 설정되었을 때 사용
		  <form-login-config>
 			<form-login-page>
 				/ch10/login.jsp
 			</form-login-page>
 			<form-error-page>
 				/ch10/login_failed.jsp
 			</form-error-page>
 		</form-login-config>
	 -->
	 
	 <!-- 실제 WEB.XML에 시큐리티 역할을 설정해보자 -->
	 <security-role>
	 		<role-name>role1</role-name>
	 		<role-name>role2</role-name>
	 </security-role>
	 
	 <!-- 시큐리티 제약 사항 설정 -- 사용자 요청 URL에 대한 접근 권한 정의 -->
	 <security-constraint>
	 		<web-resource-collection>JSPBOOK</web-resource-collection> <!-- JSPBOOK 프로젝트 자원의 이름 설정(생략가능) -->
	 		<url-pattern>/ch10.security02.jsp</url-pattern>  <!-- /ch10.security02.jsp URL 에 대해 접근 제한을 요청 -->
		
	 </security-constraint>
	<!-- 웹 자원에 접근할 수 있는 인증된 사용자 설정 
		 auth-constraint 요소를 생략하면 서버가 사용자 인증요구 안하고 승인
	
	 -->
	 
	 <auth-constraint>
	 	  <description></description>
	 	  <!-- 권한이 부여된 사용자 이름 대소문자 구분
	 	  		모든 사용자에게 권한 부여시 *로 설정
	 	   -->
	 	  <role-name>role1</role-name>
	 	  <!--  <role-name>*</role-name> -->
	 </auth-constraint>
	
	 <!-- 클라이언트와 서버간에 데이터를 전송할 때 데이터를 보호하는 방법을 설정
	 	  -NONE : 기본값으로 데이터를 보호하지 않겟다  의미
	 	   -INTEGRAL : 전송중 데이터가 변경되지 않았음을 보장(무결성)
		     -CONFIDENTIAL : 전송 중 데이터를 아무도 훔처보지 않았음을 보장(기밀성)
	 
	 
	 	<user-data-constraint>
				<transport-guarantee>NONE</transport-guarantee>
			</user-data-constraint>
	  -->
	  
	  <!-- 시큐리티 인증 설정 하기 
	  
	  		-인증 처리를 위한 로그인 페이지나 오류 페이지 호출
	  
	   -->
	   
	   <login-config>
	   		<auth-method>FORM</auth-method>
 		<form-login-config> <!-- auth 메서드가 FORM인경우 로그인페이지,오류페이지 설정 -->
 			<form-login-page>
 				/ch10/login.jsp
 			</form-login-page>
 			<form-error-page>
 				/ch10/login_failed.jsp
 			</form-error-page>
	   
	   </login-config>
	
	<!-- 기본 인증 처리 방법으로 보안 처리하기 -->
 	<!-- <security-role>
 		<role-name>role1</role-name>
 	</security-role>
 	<security-constraint>
 		<web-resource-collection>
 			<web-resource-name>JSPBOOK</web-resource-name>
	 		<url-pattern>/ch10/security01.jsp</url-pattern>
	 		<http-method>GET</http-method>
		</web-resource-collection>
		<auth-constraint>
			<description></description>
			<role-name>role1</role-name>
		</auth-constraint>
 	</security-constraint>
 	<login-config>
 		<auth-method>BASIC</auth-method>
 	</login-config> -->
 	
 	<!-- 폼 기반 인증 방법으로 보안 처리하기  -->
 	<!-- <security-role>
 		<role-name>role1</role-name>
 	</security-role>
 	<security-constraint>
 		<web-resource-collection>
 			<web-resource-name>JSPBOOK</web-resource-name>
	 		<url-pattern>/ch10/security01.jsp</url-pattern>
	 		<http-method>GET</http-method>
		</web-resource-collection>
		<auth-constraint>
			<description></description>
			<role-name>role1</role-name>
		</auth-constraint>
 	</security-constraint>
 	<login-config>
 		<auth-method>FORM</auth-method>
 		<form-login-config>
 			<form-login-page>
 				/ch10/login.jsp
 			</form-login-page>
 			<form-error-page>
 				/ch10/login_failed.jsp
 			</form-error-page>
 		</form-login-config>
 	</login-config> -->
 	 <security-role>
 		<role-name>role1</role-name>
 	</security-role>
 	<security-constraint>
 		<web-resource-collection>
 			<web-resource-name>JSPBOOK</web-resource-name>
	 		<url-pattern>/ch10/security02.jsp</url-pattern>
	 		<http-method>GET</http-method>
		</web-resource-collection>
		<auth-constraint>
			<description></description>
			<role-name>role1</role-name>
		</auth-constraint>
 	</security-constraint>
 	<login-config>
 		<auth-method>FORM</auth-method>
 		<form-login-config>
 			<form-login-page>
 				/ch10/login.jsp
 			</form-login-page>
 			<form-error-page>
 				/ch10/login_failed.jsp
 			</form-error-page>
 		</form-login-config>
 	</login-config> 
</web-app>